# Global settings (Main context)
# These settings apply to the entire Nginx server.

# Specifies the user and group under which the worker processes run.
# Running as a non-root user (e.g., 'nginx') enhances security by limiting privileges.
user nginx;

# Sets the number of worker processes. 'auto' allows Nginx to detect the number of CPU cores
# and set the worker count accordingly. Each worker handles multiple connections.
worker_processes auto;

# Defines the path to the PID file, which stores the process ID of the master process.
# This file is used by management commands (e.g., 'nginx -s reload') to identify the process.
pid /var/run/nginx.pid;

# Events block: Configures how Nginx handles connections.
events {
    # Sets the maximum number of simultaneous connections each worker process can handle.
    # Example: 4 workers with 1024 connections each = 4096 total connections.
    worker_connections 1024;
}

# HTTP block: Contains settings for handling HTTP traffic.
http {
    # Includes MIME types from an external file to map file extensions to content types.
    # Ensures proper Content-Type headers (e.g., 'text/html' for .html files).
    include /etc/nginx/mime.types;

    # Sets the default MIME type if no match is found in mime.types.
    # 'application/octet-stream' treats unmatched files as binary data.
    default_type application/octet-stream;

    # Defines a custom log format named 'main'. Logs details like client IP, request, status, etc.
    # Variables like $remote_addr and $request are placeholders for request-specific data.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Specifies the path to the access log and uses the 'main' log format.
    # Records all successful requests for monitoring and debugging.
    access_log /var/log/nginx/access.log main;

    # Specifies the path to the error log for recording issues like 404s or server errors.
    error_log /var/log/nginx/error.log;

    # Enables the sendfile() system call for efficient file serving.
    # Reduces CPU overhead by letting the kernel handle file transfers directly.
    sendfile on;

    # Enables TCP_CORK to optimize network performance by reducing packet fragmentation.
    tcp_nopush on;

    # Enables TCP_NODELAY to reduce latency by sending smaller packets immediately.
    tcp_nodelay on;

    # Sets the timeout (in seconds) for keep-alive connections. Closes idle connections after this time.
    # Keep-alive improves performance by reusing connections for multiple requests.
    keepalive_timeout 65;

    # Increases the size of the hash table for MIME types, improving lookup efficiency.
    types_hash_max_size 2048;

    # Includes additional configuration files from the conf.d directory.
    # Useful for modularizing configs (e.g., one file per virtual server).
    include /etc/nginx/conf.d/*.conf;

    # Server block: Defines a virtual server (e.g., a website).
    server {
        # Specifies the port to listen on (80 is standard for HTTP).
        listen 80;

        # Defines the domain names this server responds to.
        # Matches requests for 'example.com' or 'www.example.com'.
        server_name example.com www.example.com;

        # Sets the root directory for serving files.
        # Example: 'example.com/index.html' serves '/var/www/html/index.html'.
        root /var/www/html;

        # Specifies default files to serve when a directory is requested.
        # Tries 'index.html' first, then 'index.htm'.
        index index.html index.htm;

        # Location block: Defines how to handle requests for the root path ('/').
        location / {
            # Tries to serve the requested file or directory; returns 404 if not found.
            # $uri is the requested path, $uri/ checks for a directory.
            try_files $uri $uri/ =404;
        }
    }
}
